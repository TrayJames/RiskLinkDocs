{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome! This documentation provides detailed instructions for operating and further developing RiskLinks Cyber Risk Assessment AI chatbot.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>This project is a Multiagent AI Chat Bot designed to conduct cyber risk assessments. The Bot has Realtime voice capabilities by leveraging OpenAI Realtime API, over WebRTC. It is built using a multiagent framework in which each agent is responsible for a particular domain and asking the corresponding questions for that domain to the user. The project is developed using TypeScript and NextJS for the front end with a Python backend.</p> <ul> <li>For information on OpenAI Realtime view here</li> <li>For information on WebRTC view here</li> </ul> <p>The following documentation includes instructions on how to add agents, guardrails, handoffs, function calls, and describes the overall structure of the Bot. It is worth noting that such details are covered at a surface level. For more indepth explanation on specific files or code segments, it is recommended that you examine the comments within the project directly, linked below.</p> <p>RiskLink Chat Bot Git Repository</p> <p>Disclaimer</p> <p>The current project is developed as a prototype and requires additional configurations and setup to be fully deployable into production.</p>"},{"location":"#about-the-team","title":"About the Team:","text":"<p>This project was developed by team UBI technology of Carnegie Mellon University Heinz School of Information Systems as a Capstone Project in concert with our Client UBI Technology. </p> <ul> <li>Khushi Shah</li> <li>Sneh Sadaria</li> <li>Tra-Vaughn James</li> <li>Wendy Hu</li> <li>Yan Tian</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Next, Please view the Getting Started page for information on installing the bot on your system</p>"},{"location":"Agents/","title":"Agents","text":""},{"location":"Agents/#overview","title":"Overview","text":"<p>This section details agents that already exist in the current infrastructure, aswell as instructions and steps for creating new agents.</p>"},{"location":"Agents/#current-agents","title":"Current Agents","text":"<p>The current implementation of the AI Bot is mainly based upon the Initial Risk Assessement in which only contains Tier 1 questions. Each Tier 1 question is related to a specific domain. As such each Tier 1 domain has a specific agent that is assigned to it. </p> <p>The complete list of agents are:</p> <ul> <li>Access Control</li> <li>Anti-virus</li> <li>Asset-Management</li> <li>Backups</li> <li>Data Protection Privacy</li> <li>Incident Response</li> <li>System Security </li> <li>Training Awareness</li> <li>Greeting</li> </ul> <p>To Reiterate, each of the above agents are assigned to a particular domain within Tier 1 and will only ask questions related to there domain. For example the Access Control Agent mentioned above will only ask Tier 1 questions in the Access Control domain, the Asset Management Agent will only ask Tier 1 questions in the Asset Management domain and so on.</p> <p>The greeting agent is the only exception to this. Instead of focusing on a domain it is specifically meant to greet the user and to kick off the assessment.</p> <p>All the above agents and there configurations can be found in the  <code>src/app/agentConfigs/initialRiskAssessment</code> directory</p>"},{"location":"Agents/#creating-an-agent","title":"Creating an Agent","text":""},{"location":"Agents/#anatomy-of-an-agent","title":"Anatomy of an Agent","text":"<p>All Agents must be defined in the <code>src/app/agentConfigs/</code> directory. To add a new agent simply create a new config file in this directory. It is best to name the file something descriptive to its function. </p> <p>An agent is primarily composed of 5 key values within an object:</p> Field Description Name The name of the agent publicDescription A description of a particular agents function and capabilities Instructions The specific instructions given to an agent to carryout Tools The various tools a particular agent has access to downstreamAgents Other agents that the current agent can handoff/transfer to <p>A simple example of creating an agent with this structure can be found in <code>src/app/agentConfigs/simpleExample.ts</code> as shown below:</p> simpleExample.ts<pre><code>import { AgentConfig } from \"@/app/types\";\nimport { injectTransferTools } from \"./utils\";\n\n// Define agents\nconst haiku: AgentConfig = {\n  name: \"haiku\",\n  publicDescription: \"Agent that writes haikus.\", // Context for the agent_transfer tool\n  instructions:\n    \"Ask the user for a topic, then reply with a haiku about that topic.\",\n  tools: [],\n};\n\nconst greeter: AgentConfig = {\n  name: \"greeter\",\n  publicDescription: \"Agent that greets the user.\",\n  instructions:\n    \"Please greet the user and ask them if they'd like a Haiku. If yes, transfer them to the 'haiku' agent.\",\n  tools: [],\n  downstreamAgents: [haiku],\n};\n\nIn addition to this Agents can have a predefined state machine\n\n// add the transfer tool to point to downstreamAgents\nconst agents = injectTransferTools([greeter, haiku]);\n\nexport default agents;\n</code></pre> <p>Once you have finished creating your agent you must create an index.ts file. This file agregates all your agents into an agent set, in which can then be accessible via the front end. You can also define your down stream agents here aswell.</p> <p>This can be found in <code>src/app/agentConfigs/index.ts</code> of this can be found here:</p> index.ts<pre><code>import { AllAgentConfigsType } from \"@/app/types\";\nimport frontDeskAuthentication from \"./frontDeskAuthentication\";\nimport customerServiceRetail from \"./customerServiceRetail\";\nimport simpleExample from \"./simpleExample\";\nimport riskAssessment from \"./riskAssessment\";\nimport initialRiskAssessment from \"./initialRiskAssessment\";\n\nexport const allAgentSets: AllAgentConfigsType = {\n  frontDeskAuthentication,\n  riskAssessment,\n  customerServiceRetail,\n  simpleExample,\n  initialRiskAssessment,\n};\n\nexport const defaultAgentSetKey = \"initialRiskAssessment\";\n</code></pre>"},{"location":"Agents/#prompting-an-agent","title":"Prompting an Agent","text":"<p>An agents capability and performance is heavily based on how you prompt it. Within this infrastruture much of the functionality is defining through prompting the Agent via its instruction field. Thus it is best to be as descriptive as possible when prompting the AI. </p> <p>To assist with this we have provided a voice agent metaprompter template for you to build your prompts. This can be found in <code>src/app/agentConfigs/voiceAgentMetaprompt.txt</code>. Simply follow the instructions within this file to create your prompt.</p>"},{"location":"Agents/#creating-a-state-machine","title":"Creating a State Machine","text":"<p>"},{"location":"Agents/#multi-agents","title":"Multi-Agents","text":"<p>To create a MultiAgent infrastructure: </p> <ol> <li>Simply package all of your individual agents into a particular directory. </li> </ol> <p>For an example of this view <code>src/app/agentConfigs/frontDeskAuthentication</code></p> <ol> <li>Add an index.ts file within this directory that specifies all the downstream agents</li> </ol> <p>For an example of this view <code>src/app/agentConfigs/frontDeskAuthentication/index.ts</code></p> <ol> <li>Modify the <code>index.ts</code> file within /src/app/agentConfigs/index.ts to account for your new multi-agent framework</li> </ol> <p>For an example of this view <code>src/app/agentConfigs/index.ts</code></p>"},{"location":"Agents/#next-steps","title":"Next Steps","text":"<p>Learn how to add tools to your agents within the Tools section.</p>"},{"location":"BackgroundEscalation/","title":"Background Escalation","text":""},{"location":"BackgroundEscalation/#overview","title":"Overview","text":"<p>This section details how to escalate tasks to more intelligent models.</p>"},{"location":"BackgroundEscalation/#what-is-background-escalation","title":"What is Background Escalation","text":"<p>Background escalation allows you to exscalate task or procedures more intelligent models like o1-mini or the new o3 and o4-mini for high-stakes decisions</p>"},{"location":"GettingStarted/","title":"Getting Started","text":""},{"location":"GettingStarted/#overview","title":"Overview","text":"<p>This section details instructions and the necessary componenents to get the AI Bot up and running on your machine.</p>"},{"location":"GettingStarted/#installation","title":"Installation","text":""},{"location":"GettingStarted/#pre-requisites","title":"Pre-Requisites","text":"<p>Before installing the boton your machine of choice please ensure that following requirements installed:</p> <ul> <li>Git: Install here</li> <li>Node Package Manager via Node.js: Install here</li> <li>OpenAI API Key: Get the API Key here You must already have an OpenAI Account</li> </ul>"},{"location":"GettingStarted/#setup","title":"Setup","text":"<p>Using the link provided below clone this GitHub Repository to your machine:</p> <p>RiskLink Chat Bot Git Repo</p> <p>The following commands should all be run in a terminal: </p> <ol> <li> <p>Clone the repository by running:</p> Clone Bot Repository<pre><code>git clone https://github.com/sylvexxter/realtime-demo-risklink.git\n</code></pre> </li> <li> <p>Go into the Repo Folder</p> <pre><code>cd realtime-demo-risklink\n</code></pre> </li> <li> <p>Install Node dependencies:</p> <pre><code>npm i\n</code></pre> </li> <li> <p>Set your OpenAI API key as an environment variable:</p> <p>For information and best Practices from OpenAI for setting environment variables</p> Linux/MacOSCMD <pre><code>echo \"export OPENAI_API_KEY='yourkey'\" &gt;&gt; ~/.zshrc\nsource ~/.zshrc\necho $OPENAI_API_KEY\n</code></pre> <pre><code>setx OPENAI_API_KEY \"&lt;yourkey&gt;\"\necho %OPENAI_API_KEY%\n</code></pre> </li> <li> <p>Start Server in development mode:</p> <pre><code>npm run dev\n</code></pre> </li> <li> <p>Open up a browser and go to:</p> <pre><code>http://localhost:3000/\n</code></pre> </li> <li> <p>You will be greeted by a screen similar to what is shown below:</p> <p></p> </li> </ol>"},{"location":"GettingStarted/#next-steps","title":"Next Steps","text":"<p>Learn how to create a new agent by viewing the Agents section or understand how to extract the Risk Assessment report by viewing the Risk Assessment Recording Section.</p>"},{"location":"GuardRails/","title":"Guard Rails","text":""},{"location":"GuardRails/#overview","title":"Overview","text":"<p>This section details how to write and structure effective guard rails for your agent.</p>"},{"location":"GuardRails/#what-are-guardrails","title":"What are GuardRails","text":"<p>Guard Rails allow you to do checks and validation for user input. </p>"},{"location":"GuardRails/#next-steps","title":"Next Steps","text":"<p>Learn how to escalate more complex tasks to more intelligent agents within the Background Escalation section.</p>"},{"location":"RiskAssesmentRecording/","title":"Risk Assessment Recording","text":""},{"location":"RiskAssesmentRecording/#overview","title":"Overview","text":"<p>This section details how Risk Assessment answers are stored and recorded as well as how to access such after an Assessment has been completed.</p>"},{"location":"Tools/","title":"Tools","text":""},{"location":"Tools/#overview","title":"Overview","text":"<p>This section details how to develope and test tools for your agents.</p>"},{"location":"Tools/#what-are-tools","title":"What are Tools","text":"<p>Tools allow agents to perform some type of action such as fetching data, calling external API's and other useful funtions</p> <p>"},{"location":"Tools/#next-steps","title":"Next Steps","text":"<p>Learn how to prompt your agent with Guardrails within the GuardRails section.</p>"}]}